#!/usr/bin/env python3
"""
Bot de prueba para verificar la configuraci√≥n
"""

import time
import requests
import pandas as pd
import numpy as np
from binance.client import Client
from ta.momentum import RSIIndicator
from ta.trend import EMAIndicator
from datetime import datetime
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')

SYMBOLS = ["BTCUSDT", "ETHUSDT"]
INTERVAL = "5m"
RSI_PERIOD = 14
EMA_PERIOD = 20

def send_telegram_message(text):
    """Env√≠a mensaje a Telegram"""
    if not TELEGRAM_TOKEN or not CHAT_ID:
        print("‚ùå Token o Chat ID no configurado")
        return False
        
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text, "parse_mode": "HTML"}
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        print(f"üì§ Enviando mensaje... Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Mensaje enviado correctamente")
            return True
        else:
            print(f"‚ùå Error: {response.json()}")
            return False
    except Exception as e:
        print(f"‚ùå Error enviando mensaje: {e}")
        return False

def test_binance_connection():
    """Prueba la conexi√≥n con Binance"""
    try:
        client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)
        # Obtener informaci√≥n de la cuenta
        account_info = client.get_account()
        print("‚úÖ Conexi√≥n con Binance exitosa")
        return True
    except Exception as e:
        print(f"‚ùå Error conectando con Binance: {e}")
        return False

def test_telegram_connection():
    """Prueba la conexi√≥n con Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe"
        response = requests.get(url)
        if response.status_code == 200:
            bot_info = response.json()
            print(f"‚úÖ Bot de Telegram: {bot_info['result']['first_name']}")
            return True
        else:
            print(f"‚ùå Error Telegram: {response.json()}")
            return False
    except Exception as e:
        print(f"‚ùå Error conectando con Telegram: {e}")
        return False

def get_simple_signal(symbol):
    """Obtiene una se√±al simple"""
    try:
        client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)
        
        # Obtener datos
        klines = client.get_klines(symbol=symbol, interval=INTERVAL, limit=100)
        df = pd.DataFrame(klines, columns=[
            "open_time","open","high","low","close","volume",
            "close_time","quote_asset_volume","number_of_trades",
            "taker_buy_base","taker_buy_quote","ignore"
        ])
        df["close"] = df["close"].astype(float)
        
        # Calcular indicadores
        rsi = RSIIndicator(df["close"], window=RSI_PERIOD).rsi()
        ema = EMAIndicator(df["close"], window=EMA_PERIOD).ema_indicator()
        
        last_rsi = rsi.iloc[-1]
        last_ema = ema.iloc[-1]
        last_price = df["close"].iloc[-1]
        
        # Se√±al simple
        signal = last_rsi < 30 and last_price > last_ema
        
        return {
            'symbol': symbol,
            'price': last_price,
            'rsi': last_rsi,
            'ema': last_ema,
            'signal': signal
        }
    except Exception as e:
        print(f"‚ùå Error analizando {symbol}: {e}")
        return None

def main():
    print("üß™ Bot de Prueba - Verificando Configuraci√≥n")
    print("=" * 50)
    
    # Verificar configuraci√≥n
    print("üìã Verificando configuraci√≥n...")
    print(f"  Telegram Token: {'‚úÖ' if TELEGRAM_TOKEN else '‚ùå'}")
    print(f"  Chat ID: {'‚úÖ' if CHAT_ID else '‚ùå'}")
    print(f"  Binance API Key: {'‚úÖ' if BINANCE_API_KEY else '‚ùå'}")
    print(f"  Binance API Secret: {'‚úÖ' if BINANCE_API_SECRET else '‚ùå'}")
    
    if not all([TELEGRAM_TOKEN, CHAT_ID, BINANCE_API_KEY, BINANCE_API_SECRET]):
        print("‚ùå Configuraci√≥n incompleta. Revisa el archivo .env")
        return
    
    # Probar conexiones
    print("\nüîó Probando conexiones...")
    telegram_ok = test_telegram_connection()
    binance_ok = test_binance_connection()
    
    if not telegram_ok or not binance_ok:
        print("‚ùå Error en las conexiones. Revisa tus claves.")
        return
    
    # Probar env√≠o de mensaje
    print("\nüì§ Probando env√≠o de mensaje...")
    test_message = f"""
üß™ <b>Prueba del Bot de Trading</b>

‚úÖ Conexiones verificadas
‚è∞ {datetime.now().strftime('%H:%M:%S')}

Si ves este mensaje, la configuraci√≥n es correcta.
"""
    
    if send_telegram_message(test_message):
        print("‚úÖ Bot funcionando correctamente")
        
        # Probar an√°lisis
        print("\nüìä Probando an√°lisis de se√±ales...")
        for symbol in SYMBOLS:
            signal_data = get_simple_signal(symbol)
            if signal_data:
                print(f"  {symbol}: Precio ${signal_data['price']:.2f}, RSI {signal_data['rsi']:.1f}")
    else:
        print("‚ùå Error enviando mensaje. Revisa el Chat ID.")

if __name__ == "__main__":
    main()
